diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..5649459
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+xdat*
+memor*
diff --git a/0-dev_cycle.md b/0-dev_cycle.md
new file mode 100644
index 0000000..373f3a4
--- /dev/null
+++ b/0-dev_cycle.md
@@ -0,0 +1,329 @@
+```text
+Development Cycle - wa1tnr notes
+
+Development cycle consists of editing main.fs, and
+then using the 'c' (compile) shell script.
+
+This prepares something useful for Forth.
+
+Build the arduino program as usual, and upload it to your
+SAMD21 target board, but only after compiling in gforth
+in your host operating system (desktop Linux machine for
+the reference system).
+
+Use a nice tty program to talk to the target board
+(Adfruit Feather M0 Express is the reference platform).
+
+
+Example of a useful main.fs
+
+\  - - -   snip!   - - -
+\ main.fs
+target
+turnkey
+    decimal
+: test  ." this is going to be good 27 Dec 2021 at 12:17:31 UTC" ;
+: kurtz 43 #, emit 32 #, emit cr 1 #, 2 #, 3 #, -99 #, -98 #, -97 #, .s ;
+turnkey decimal interpret
+\  - - -   snip!   - - -
+
+
+When the target is connected to (via USB cable and /dev/ttyACM0)
+the session for the above main.fs, it looks like this in your
+(putty-like) terminal environment:
+
+words  << you type this yourself and (as always, you pressed ENTER
+          after typing the name of any word)
+
+The system responds by printing its entire vocabulary, one word per
+line, to your (putty-like) terminal:
+
+kurtz 0328  << our new test word, defined in main.fs
+test 02EF 
+interpret 02DA 
+.s 0280 
+= 026D 
+0= 0264 
+? 0260 
+' 025C 
+h# 0244 
+find 0224 
+match 0208 
+query 01E1 
+echo 01DD 
+tib! 01D1 
+words 01C3 
+
+.
+.
+
+\ many words omitted here for brevity
+
+.
+.
+
+r> 000C 
+>r 000B 
+key 0005 
+emit 0004 
+quit 0003 
+abort 0002 
+exit 0001 
+--> empty  << the system ended the list of words with a stack report - the stack was empty
+kurtz +  << you typed this (but not the trailing plus symbol - that was output by the system!)
+--> 1 2 3 -99 -98 -97 --> 1 2 3 -99 -98 -97  << the 'kurtz' word ran ..
+    .. and populated the stack with six values
+drop --> 1 2 3 -99 -98  << you typed 'drop' and one stack element was consumed
+.s --> 1 2 3 -99 -98 --> 1 2 3 -99 -98   << you typed '.s' and a stack report was given
+drop --> 1 2 3 -99  << you typed 'drop' and another stack element was consumed
+.s --> 1 2 3 -99 --> 1 2 3 -99 
+drop --> 1 2 3 
+drop --> 1 2 
+drop --> 1 
+32 32 ? << you typed a number and the interpreter did not know what to do with your input
+--> empty  << any 'huh' (that question mark is a 'huh') empties the stack
+
+Exhibit:
+
+ $ cat -n ARM-Forth.ino  | your_filter_here
+
+359 void _huh(){
+360     Serial.write(" ?\n");
+361     _abort();
+362 }
+
+back to the narrative describing the session:
+
+.s --> empty --> empty  <<  you typed dot-S and Forth reported it empty, twice
+kurtz +  << you ran the 'kurtz' word again, and it once more populated the stack with six values
+--> 1 2 3 -99 -98 -97 --> 1 2 3 -99 -98 -97 
+* --> 1 2 3 -99 9506 << you multiplied the top two values on the stack
+. 9506 --> 1 2 3 -99  << you printed the top of the stack
+. -99 --> 1 2 3 
+. 3 --> 1 2 
+. 2 --> 1 
+. 1 --> empty
+kurtz +  << since the stack was empty, you typed 'kurtz' yet again, to repopulate it
+--> 1 2 3 -99 -98 -97 --> 1 2 3 -99 -98 -97 
++ --> 1 2 3 -99 -195 
++ --> 1 2 3 -294 
++ --> 1 2 -291 
++ --> 1 -289 
++ --> -288 
+
+
+AT THE TOP of the session, it looked like this (now, in full):
+
+words  << this was all you typed
+kurtz 0328 
+test 02EF 
+interpret 02DA 
+.s 0280 
+= 026D 
+0= 0264 
+? 0260 
+' 025C 
+h# 0244 
+find 0224 
+match 0208 
+query 01E1 
+echo 01DD 
+tib! 01D1 
+words 01C3 
+dictionary 01BD 
+r 0198 
+d 0189 
+hc. 0177 
+hw. 0163 
+h. 014B 
+max 013E 
+BL 0139 
+true 0134 
+false 012F 
+. 012A 
+0< 011D 
+d. 0111 
+dabs 010C 
+u. 0106 
+ud. 00FF 
+#s 00F3 
+# 00DA 
+hex 00D3 
+decimal 00CC 
+base 00CA 
+#> 00C1 
+<# 00BC 
+sign 00B3 
+hold 00AA 
+holder 00A8 
+*/ 00A4 
+*/mod 009E 
+ud/mod 0091 
+mod 0089 
+/ 0080 
+* 007C 
+type 0073 
+space 006D 
+count 0067 
+rot 0061 
+pad 005F 
+tib 005D 
+ptype 0053 
+1- 004D 
+1+ 0047 
+Keyboard.releaseAll 0045 
+Keyboard.release 0044 
+Keyboard.press 0043 
+Keyboard.begin 0042 
+rshift 0041 
+lshift 0040 
+@GPIO 003F 
+initGPIO 003E 
+@MCP23017 003D 
+initMCP23017 003C 
+nip 003B 
+dnegate 0039 
+w! 0038 
+w@ 0037 
+um/mod 0036 
+um* 0035 
+w@+ 0034 
+c@+ 0033 
+huh? 0032 
+execute 0031 
+depth 0030 
+!+ 002F 
+c!+ 002E 
+! 002D 
+c! 002C 
+@p 002B 
+w!+ 002A 
+p! 0029 
+p 0028 
+a! 0027 
+a 0026 
+@p+ 0025 
+@+ 0024 
+@ 0023 
+c@ 0022 
+2/ 0021 
+2* 0020 
+abs 001F 
+negate 001E 
+invert 001D 
+xor 001C 
+or 001B 
+and 001A 
+cr 0019 
+ms 0018 
+- 0017 
++ 0016 
+over 0015 
+swap 0014 
+drop 0013 
+dup 0012 
+timer 0011 
+counter 0010 
+d# 000F 
+.sh 000E 
+r@ 000D 
+r> 000C 
+>r 000B 
+key 0005 
+emit 0004 
+quit 0003 
+abort 0002 
+exit 0001 
+--> empty
+kurtz + 
+
+back to the present.
+
+--> empty
+kurtz + 
+--> 1 2 3 -99 -98 -97 --> 1 2 3 -99 -98 -97 
+drop --> 1 2 3 -99 -98 
+.s --> 1 2 3 -99 -98 --> 1 2 3 -99 -98 
+drop --> 1 2 3 -99 
+.s --> 1 2 3 -99 --> 1 2 3 -99 
+drop --> 1 2 3 
+drop --> 1 2 
+drop --> 1 
+32 32 ?
+--> empty
+.s --> empty --> empty
+kurtz + 
+--> 1 2 3 -99 -98 -97 --> 1 2 3 -99 -98 -97 
+* --> 1 2 3 -99 9506 
+. 9506 --> 1 2 3 -99 
+. -99 --> 1 2 3 
+. 3 --> 1 2 
+. 2 --> 1 
+. 1 --> empty
+kurtz + 
+--> 1 2 3 -99 -98 -97 --> 1 2 3 -99 -98 -97 
++ --> 1 2 3 -99 -195 
++ --> 1 2 3 -294 
++ --> 1 2 -291 
++ --> 1 -289 
++ --> -288 
+
+AS A BIT of an easter egg, note the odd placement of a '+' in your
+terminal, after typing 'kurtz'.
+
+This is what happened:
+
+: kurtz 43 #, emit 32 #, emit cr 1 #, 2 #, 3 #, -99 #, -98 #, -97 #, .s ;
+
+ASCII 43 was entered where 'emit' can find it.  43 is the plus symbol.
+
+It was 'emit' (in Forth we say 'emit' to indicate a character prints)
+.. to your console (like   Serial.print('+');   would do).
+
+Similarly, with ASCII 32 (the space character).
+
+The 'cr' word (carriage return) gives a newline, which will visually
+apply when you follow with the '.s' word at the end of the definition
+of the 'kurtz' word.
+
+
+TAKE a diff of 'memory.h' after a light change to main.fs to see
+what's going on, here.
+
+(try editing a plain text string, as in this example snippet):
+
+: test  ." this is going to be good 27 Dec 2021 at 13:35:10 UTC" ;
+
+memory.h essentially is a program.  literally, it is a list of integer
+values (held as an array of integers).  These feed the virtual forth
+machine, with instructions and/or data.
+
+
+gpio setups follow.
+
+First, modify the .INO file to setup the (LED blinkie)
+port pin for OUTPUT:
+
+ $  git diff ARM-Forth.ino | cat
+diff --git a/ARM-Forth.ino b/ARM-Forth.ino
+index b77b234..2fee4bb 100644
+--- a/ARM-Forth.ino
++++ b/ARM-Forth.ino
+@@ -435,6 +435,7 @@ void _fetchMCP23017(){
+
+ // all the I/O pins needed for the steno keyboard
+ void _initGPIO(){
++    pinMode(13, OUTPUT); // tnr 27 dec
+     pinMode(9, INPUT_PULLUP);
+     pinMode(10, INPUT_PULLUP);
+     pinMode(11, INPUT_PULLUP);
+ $
+
+It is assumed, at this point, that this is the right approach
+to begin to blink an LED - leverage the Arduino IDE code base
+for this one task.
+
+Mon 27 Dec 13:26:38 UTC 2021
+
+END
+```
diff --git a/ARM-Forth.ino b/ARM-Forth.ino
index b77b234..fd1de6e 100644
--- a/ARM-Forth.ino
+++ b/ARM-Forth.ino
@@ -40,6 +40,30 @@ void setup(){
 
 // Forth code words
 
+#define BLINK_TIME 80
+#define DELTA_TIME 700
+
+void quickly(void) {
+    int elapsed=millis();
+    do {
+        for (volatile int slow = 3; slow > 0; slow--) { }
+    } while ((millis() - elapsed) < BLINK_TIME);
+}
+
+void slowly(void) {
+    int elapsed=millis();
+    do {
+        for (volatile int slow = 3; slow > 0; slow--) { }
+    } while ((millis() - elapsed) < (BLINK_TIME + DELTA_TIME));
+}
+
+void _blink_led(void) {
+    digitalWrite(LED_BUILTIN, 1);
+    quickly();
+    digitalWrite(LED_BUILTIN, 0);
+    slowly();
+}
+
 void _emit(){
     Serial.write(T);
     DROP;
@@ -435,6 +459,8 @@ void _fetchMCP23017(){
 
 // all the I/O pins needed for the steno keyboard
 void _initGPIO(){
+    pinMode(LED_BUILTIN, OUTPUT); // tnr 27 dec
+    digitalWrite(LED_BUILTIN, 0);
     pinMode(9, INPUT_PULLUP);
     pinMode(10, INPUT_PULLUP);
     pinMode(11, INPUT_PULLUP);
@@ -516,7 +542,8 @@ void (*function[])()={
     _initGPIO , _fetchGPIO , _lshift , _rshift , // 66
     _Keyboard_begin , _Keyboard_press , // 68
     _Keyboard_release , _Keyboard_releaseAll , _Keyboard_end , // 71
-    _dropzbranch , // 72
+    _blink_led , // 72 simple integer count
+    _dropzbranch , // 73
 };
 
 void _execute(){
diff --git a/README.md b/README.md
index 877c872..d100b9f 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,19 @@
 # ARM-Forth
-ITC Forth in C, built and tested on the Adafruit QT Py and on the Adafruit Itsy Bitsy M0. This is a target compiled Forth that deviates from the standard in several ways. Branching words don't consume the stack. This is similar to the Green Arrays chips. There are two address spaces, RAM and program memory. RAM has an address "register" called A. Program memory has one called P. Primitives such as c@+, c!+, @p+, use those address registers. Also it's target compiled but not exactly tethered. The target has separated heads and a text interpreter, but no compiling. At least not yet. The interpreter is specifically designed to work with the Arduino IDE and its serial terminal.
+ITC Forth in C, built and tested on the Adafruit QT Py
+and on the Adafruit Itsy Bitsy M0.
+
+This is a target compiled Forth that deviates from the
+standard in several ways. Branching words don't consume
+the stack. This is similar to the Green Arrays chips.
+
+There are two address spaces, RAM and program memory.
+RAM has an address "register" called A. Program memory
+has one called P. Primitives such as c@+, c!+, @p+, use
+those address registers. Also it's target compiled but
+not exactly tethered. The target has separated heads and
+a text interpreter, but no compiling. At least not yet.
+
+The interpreter is specifically designed to work with the
+Arduino IDE and its serial terminal.
+
 See the file "main.fs" for a steno keyboard firmware.
diff --git a/_main.fs__ORIG__ b/_main.fs__ORIG__
new file mode 100644
index 0000000..d83f8b7
--- /dev/null
+++ b/_main.fs__ORIG__
@@ -0,0 +1,62 @@
+\ main.fs
+target
+variable data 4 ramALLOT
+: /data  data a! 5 #, for 0 #, c!+ next ;
+: under+ ( n1 n2 n3 - m1+n3 n2)  rot + swap ;
+: #bits ( n1 - n2)  0 #, swap
+    31 #, for -if 1 #, under+ then 2* next drop ;
+: @pins (  - n)  @MCP23017 @GPIO 16 #, lshift or ;
+: press (  - n)  dup begin drop @pins until ;
+: release ( n1 - n2)  begin @pins while or repeat drop ;
+: scan (  - n)
+    begin press 20 #, ms @pins if or release exit then drop again
+
+: mark ( mask a)  data + dup >r c@ or r> c! ;
+: Gemini ( n)  /data $80 #, data c!
+    dup $0100000 #, and if $40 #, 1 #, mark then drop \ S1
+    dup $0200000 #, and if $10 #, 1 #, mark then drop \ T
+    dup $0400000 #, and if $04 #, 1 #, mark then drop \ P
+    dup $0800000 #, and if $01 #, 1 #, mark then drop \ H
+    dup $1000000 #, and if $08 #, 2 #, mark then drop \ *
+    dup $0008000 #, and if $02 #, 3 #, mark then drop \ F
+    dup $0004000 #, and if $40 #, 4 #, mark then drop \ P
+    dup $0002000 #, and if $10 #, 4 #, mark then drop \ L
+    dup $0001000 #, and if $04 #, 4 #, mark then drop \ T
+    dup $0000100 #, and if $01 #, 4 #, mark then drop \ D
+    dup $0080000 #, and if $20 #, 1 #, mark then drop \ S2
+    dup $0040000 #, and if $08 #, 1 #, mark then drop \ K
+    dup $0020000 #, and if $02 #, 1 #, mark then drop \ W
+    dup $0010000 #, and if $40 #, 2 #, mark then drop \ R
+    dup $0000200 #, and if $04 #, 2 #, mark then drop \ *
+    dup $0000001 #, and if $01 #, 3 #, mark then drop \ R
+    dup $0000002 #, and if $20 #, 4 #, mark then drop \ B
+    dup $0000004 #, and if $08 #, 4 #, mark then drop \ G
+    dup $0000800 #, and if $02 #, 4 #, mark then drop \ S
+    dup $0000400 #, and if $01 #, 5 #, mark then drop \ Z
+    dup $0000008 #, and if $20 #, 2 #, mark then drop \ A
+    dup $0000010 #, and if $10 #, 2 #, mark then drop \ O 
+    dup $0000020 #, and if $40 #, 5 #, mark then drop \ #
+    dup $0000040 #, and if $08 #, 3 #, mark then drop \ E
+    dup $0000080 #, and if $04 #, 3 #, mark then drop \ U
+    drop ;
+variable 'spit
+: spit  'spit @ execute ;
+: >emit  ['] emit 'spit ! ;
+: >hc.  ['] hc. 'spit ! ;
+: send  data a! 5 #, for c@+ spit next ;
+: emitHID ( c)
+    ( Keyboard.begin) dup Keyboard.press 2 #, ms
+    Keyboard.release ( Keyboard.end) ;
+: navigate  $86 #, Keyboard.press $b3 a #, emitHID
+    begin scan $20 #, = /while $b3 #, emitHID repeat
+    Keyboard.releaseAll ;
+: go ( n - n)
+    begin
+        begin scan $1000220 #, - while $1000220 #, + Gemini send repeat
+        drop navigate
+    again
+: init  initMCP23017 initGPIO ;
+turnkey decimal init Keyboard.begin
+\    >hc. interpret
+    >emit go
+
diff --git a/a b/a
old mode 100644
new mode 100755
diff --git a/c b/c
old mode 100644
new mode 100755
diff --git a/core.fs b/core.fs
index 2af4ed9..d581419 100644
--- a/core.fs
+++ b/core.fs
@@ -105,7 +105,8 @@ code Keyboard.press  68 ,
 code Keyboard.release  69 ,
 code Keyboard.releaseAll  70 ,
 \ code Keyboard.end  71 ,
--code /branch  72 ,
+code blink 72 ,
+-code /branch  73 ,
 
 :m begin (  - a)  here m;
 :m again ( a)  branch [ 2/ ] , m;
@@ -130,6 +131,12 @@ code Keyboard.releaseAll  70 ,
 :m wvariable  code 14 , ramHERE , 2 ramALLOT m;
 :m variable  code 14 , ramHERE , 4 ramALLOT m;
 
+\ // read 32 bits inline
+\ void _lit(){
+\     DUP;
+\     T=memory[I++]+(memory[I++]<<16);
+\ }
+
 \ think of #, as a literal instruction in an assembler
 :m #,  lit [ dup $ffff and ] , [ $10000 / $ffff and ] , m;
 :m [']  [ ' >body @ ] #, m;
@@ -248,6 +255,7 @@ here [ 4 + constant dict ]
     drop true ;
 : =  ( n1 n2 - flag)  - 0= ;
 -: ?.  base c@ $10 #, - if drop . exit then drop u. ;
+\ : .s  depth 0= if drop ." --> empty" exit then drop
 : .s  depth 0= if drop ." --> empty " exit then drop
     depth 1 #, = if drop dup ." --> " ?. exit then drop
     ." --> " depth dup a! begin swap >r 1- while repeat drop
@@ -256,4 +264,3 @@ here [ 4 + constant dict ]
     begin .s cr query space find while
         execute depth -if huh? then drop
     repeat tib count type huh?
-
diff --git a/main.fs b/main.fs
index d83f8b7..5d2717a 100644
--- a/main.fs
+++ b/main.fs
@@ -1,62 +1,44 @@
 \ main.fs
+\ commit 70276f2
+\ Mon Dec 27 18:20:16 UTC 2021
+
 target
-variable data 4 ramALLOT
-: /data  data a! 5 #, for 0 #, c!+ next ;
-: under+ ( n1 n2 n3 - m1+n3 n2)  rot + swap ;
-: #bits ( n1 - n2)  0 #, swap
-    31 #, for -if 1 #, under+ then 2* next drop ;
-: @pins (  - n)  @MCP23017 @GPIO 16 #, lshift or ;
-: press (  - n)  dup begin drop @pins until ;
-: release ( n1 - n2)  begin @pins while or repeat drop ;
-: scan (  - n)
-    begin press 20 #, ms @pins if or release exit then drop again
-
-: mark ( mask a)  data + dup >r c@ or r> c! ;
-: Gemini ( n)  /data $80 #, data c!
-    dup $0100000 #, and if $40 #, 1 #, mark then drop \ S1
-    dup $0200000 #, and if $10 #, 1 #, mark then drop \ T
-    dup $0400000 #, and if $04 #, 1 #, mark then drop \ P
-    dup $0800000 #, and if $01 #, 1 #, mark then drop \ H
-    dup $1000000 #, and if $08 #, 2 #, mark then drop \ *
-    dup $0008000 #, and if $02 #, 3 #, mark then drop \ F
-    dup $0004000 #, and if $40 #, 4 #, mark then drop \ P
-    dup $0002000 #, and if $10 #, 4 #, mark then drop \ L
-    dup $0001000 #, and if $04 #, 4 #, mark then drop \ T
-    dup $0000100 #, and if $01 #, 4 #, mark then drop \ D
-    dup $0080000 #, and if $20 #, 1 #, mark then drop \ S2
-    dup $0040000 #, and if $08 #, 1 #, mark then drop \ K
-    dup $0020000 #, and if $02 #, 1 #, mark then drop \ W
-    dup $0010000 #, and if $40 #, 2 #, mark then drop \ R
-    dup $0000200 #, and if $04 #, 2 #, mark then drop \ *
-    dup $0000001 #, and if $01 #, 3 #, mark then drop \ R
-    dup $0000002 #, and if $20 #, 4 #, mark then drop \ B
-    dup $0000004 #, and if $08 #, 4 #, mark then drop \ G
-    dup $0000800 #, and if $02 #, 4 #, mark then drop \ S
-    dup $0000400 #, and if $01 #, 5 #, mark then drop \ Z
-    dup $0000008 #, and if $20 #, 2 #, mark then drop \ A
-    dup $0000010 #, and if $10 #, 2 #, mark then drop \ O 
-    dup $0000020 #, and if $40 #, 5 #, mark then drop \ #
-    dup $0000040 #, and if $08 #, 3 #, mark then drop \ E
-    dup $0000080 #, and if $04 #, 3 #, mark then drop \ U
-    drop ;
-variable 'spit
-: spit  'spit @ execute ;
-: >emit  ['] emit 'spit ! ;
-: >hc.  ['] hc. 'spit ! ;
-: send  data a! 5 #, for c@+ spit next ;
-: emitHID ( c)
-    ( Keyboard.begin) dup Keyboard.press 2 #, ms
-    Keyboard.release ( Keyboard.end) ;
-: navigate  $86 #, Keyboard.press $b3 a #, emitHID
-    begin scan $20 #, = /while $b3 #, emitHID repeat
-    Keyboard.releaseAll ;
-: go ( n - n)
-    begin
-        begin scan $1000220 #, - while $1000220 #, + Gemini send repeat
-        drop navigate
-    again
-: init  initMCP23017 initGPIO ;
-turnkey decimal init Keyboard.begin
-\    >hc. interpret
-    >emit go
+turnkey
+    decimal
+    initGPIO
+
+: test  ." this is going to be good 27 Dec 2021 at 13:29:55 UTC" ;
+
+: kurtz cr 1 #, 2 #, 3 #, -99 #, -98 #, -97 #, .s ;
+
+: togpin 13 #, ;
+
+: said
+  43 #, emit
+  32 #, emit
+  43 #, emit cr
+;
+
+: wiggle blink blink blink blink blink ;
+
+\ literals
+\ : olit a dup drop 1 #, swap drop ;
+\ : tlit a dup drop $0100000 #, swap drop ;
+\ : vlit a dup 1+ swap - ;
+
+: dlit dup 1+ ; \ simple and does what's wanted
+: jlit dlit dlit swap - ; \ always exactly '1'
+
+\ : lit0q dup 1+ dup 1+ swap - $00 #, swap drop ;
+: lit0 dup $0 #, swap drop ;
+: lit1 lit0 1+ ;
+: lit2 lit1 1+ ;
+: lit3 lit2 1+ ;
+
+: lit16  dup $10 #, swap drop ;
+: lit7f  dup $7f #, swap drop ;
+: lit256 dup $100 #, swap drop ;
+
+: id ." 27 Dec Monday 20:24z" cr ;
 
+turnkey decimal interpret
diff --git a/main.fs__ORIG_tnr_works b/main.fs__ORIG_tnr_works
new file mode 100644
index 0000000..e7bb3b7
--- /dev/null
+++ b/main.fs__ORIG_tnr_works
@@ -0,0 +1,9 @@
+\ 800f676
+\ 2021-11-22 07:08:41
+
+\ main.fs
+target
+turnkey
+    decimal
+: test  ." this is going to be good 27 Dec 2021 at 12:17:31 UTC" ;
+turnkey decimal interpret
diff --git a/memory.h b/memory.h
index 4534f04..a3df67c 100644
--- a/memory.h
+++ b/memory.h
@@ -2,7 +2,7 @@
 
 const uint16_t memory[] = {
 
-1296 , 
+919 , 
 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 
 9 , 10 , 11 , 12 , 13 , 15 , 16 , 17 , 
 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 
@@ -11,161 +11,113 @@ const uint16_t memory[] = {
 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 
 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 
 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 
-66 , 67 , 68 , 69 , 70 , 72 , 0 , 6 , 
-1 , 0 , 22 , 1 , 0 , 6 , 65535 , 65535 , 
-22 , 1 , 0 , 20 , 41 , 77 , 11 , 37 , 
-4 , 10 , 88 , 1 , 14 , 0 , 14 , 34 , 
-0 , 11 , 20 , 12 , 20 , 1 , 0 , 18 , 
-71 , 20 , 34 , 1 , 0 , 6 , 32 , 0 , 
-4 , 1 , 0 , 77 , 11 , 103 , 4 , 10 , 
-118 , 19 , 1 , 0 , 53 , 19 , 1 , 0 , 
-6 , 0 , 0 , 20 , 54 , 20 , 19 , 1 , 
-0 , 6 , 0 , 0 , 20 , 54 , 19 , 1 , 
-0 , 11 , 6 , 0 , 0 , 13 , 54 , 12 , 
-20 , 11 , 54 , 12 , 1 , 0 , 11 , 53 , 
-12 , 54 , 1 , 0 , 158 , 59 , 1 , 14 , 
-68 , 0 , 168 , 55 , 77 , 18 , 168 , 56 , 
-44 , 1 , 0 , 9 , 186 , 6 , 45 , 0 , 
-170 , 19 , 1 , 0 , 95 , 168 , 56 , 1 , 
-0 , 19 , 19 , 168 , 55 , 95 , 21 , 23 , 
-1 , 14 , 70 , 0 , 6 , 10 , 0 , 202 , 
-44 , 1 , 0 , 6 , 16 , 0 , 202 , 44 , 
-1 , 0 , 202 , 34 , 145 , 97 , 6 , 9 , 
-0 , 21 , 23 , 9 , 236 , 19 , 6 , 7 , 
-0 , 22 , 18 , 19 , 6 , 48 , 0 , 22 , 
-170 , 1 , 0 , 218 , 21 , 21 , 27 , 8 , 
-253 , 19 , 7 , 244 , 19 , 1 , 0 , 188 , 
-243 , 193 , 115 , 109 , 1 , 0 , 6 , 0 , 
-0 , 255 , 1 , 0 , 9 , 272 , 57 , 1 , 
-0 , 18 , 11 , 268 , 188 , 243 , 12 , 179 , 
-193 , 115 , 109 , 1 , 0 , 9 , 293 , 19 , 
-6 , 65535 , 65535 , 1 , 19 , 6 , 0 , 0 , 
-1 , 0 , 18 , 285 , 273 , 1 , 0 , 6 , 
-0 , 0 , 1 , 0 , 6 , 65535 , 65535 , 1 , 
-0 , 6 , 32 , 0 , 1 , 0 , 21 , 21 , 
-23 , 9 , 328 , 19 , 20 , 19 , 1 , 19 , 
-19 , 1 , 0 , 202 , 34 , 11 , 211 , 6 , 
-0 , 0 , 188 , 218 , 218 , 218 , 218 , 218 , 
-218 , 218 , 218 , 193 , 115 , 109 , 12 , 202 , 
-44 , 1 , 0 , 202 , 34 , 11 , 211 , 6 , 
-0 , 0 , 188 , 218 , 218 , 218 , 218 , 193 , 
-115 , 109 , 12 , 202 , 44 , 1 , 0 , 202 , 
-34 , 11 , 211 , 6 , 0 , 0 , 188 , 218 , 
-218 , 193 , 115 , 109 , 12 , 202 , 44 , 1 , 
-0 , 18 , 355 , 41 , 109 , 6 , 7 , 0 , 
-11 , 37 , 355 , 10 , 402 , 40 , 1 , 0 , 
-18 , 355 , 39 , 109 , 6 , 15 , 0 , 11 , 
-51 , 375 , 10 , 417 , 38 , 1 , 0 , 95 , 
-39 , 40 , 43 , 6 , 255 , 0 , 26 , 33 , 
-11 , 37 , 42 , 10 , 434 , 95 , 103 , 115 , 
-109 , 37 , 355 , 1 , 0 , 6 , 3582 , 0 , 
-41 , 1 , 0 , 25 , 445 , 40 , 43 , 8 , 
-463 , 19 , 423 , 25 , 7 , 454 , 19 , 1 , 
-0 , 93 , 18 , 34 , 71 , 21 , 44 , 18 , 
-34 , 22 , 44 , 1 , 0 , 18 , 4 , 1 , 
-0 , 303 , 93 , 45 , 303 , 19 , 5 , 313 , 
-318 , 313 , 28 , 8 , 486 , 313 , 28 , 477 , 
-465 , 5 , 313 , 318 , 313 , 28 , 8 , 511 , 
-313 , 28 , 477 , 465 , 7 , 498 , 19 , 313 , 
-93 , 18 , 34 , 22 , 71 , 44 , 1 , 0 , 
-93 , 39 , 303 , 40 , 43 , 6 , 255 , 0 , 
-26 , 33 , 11 , 52 , 37 , 23 , 27 , 10 , 
-532 , 37 , 20 , 8 , 546 , 19 , 19 , 303 , 
-1 , 19 , 1 , 0 , 445 , 40 , 43 , 8 , 
-562 , 19 , 520 , 8 , 559 , 1 , 19 , 7 , 
-550 , 1 , 0 , 6 , 58 , 0 , 23 , 9 , 
-575 , 6 , 10 , 0 , 22 , 1 , 6 , 29 , 
-0 , 23 , 1 , 0 , 6 , 0 , 0 , 5 , 
-313 , 318 , 313 , 28 , 8 , 602 , 313 , 28 , 
-563 , 20 , 32 , 32 , 32 , 32 , 27 , 7 , 
-584 , 19 , 1 , 0 , 481 , 548 , 1 , 0 , 
-35 , 331 , 1 , 0 , 8 , 618 , 19 , 303 , 
-1 , 19 , 308 , 1 , 0 , 23 , 612 , 1 , 
-0 , 202 , 34 , 6 , 16 , 0 , 23 , 8 , 
-637 , 19 , 298 , 1 , 19 , 262 , 1 , 0 , 
-48 , 612 , 8 , 660 , 19 , 58 , 10 , 45 , 
-45 , 62 , 32 , 101 , 109 , 112 , 116 , 121 , 
-32 , 83 , 1 , 19 , 48 , 6 , 1 , 0 , 
-621 , 8 , 679 , 19 , 18 , 58 , 4 , 45 , 
-45 , 62 , 32 , 83 , 625 , 1 , 19 , 58 , 
-4 , 45 , 45 , 62 , 32 , 83 , 48 , 18 , 
-39 , 20 , 11 , 77 , 8 , 697 , 7 , 690 , 
-19 , 38 , 13 , 625 , 12 , 20 , 77 , 8 , 
-708 , 7 , 699 , 19 , 1 , 0 , 640 , 25 , 
-481 , 109 , 548 , 8 , 726 , 49 , 48 , 9 , 
-723 , 50 , 19 , 7 , 711 , 93 , 103 , 115 , 
-50 , 14 , 71 , 0 , 730 , 39 , 6 , 5 , 
-0 , 11 , 6 , 0 , 0 , 46 , 10 , 739 , 
-1 , 0 , 97 , 22 , 20 , 1 , 0 , 6 , 
-0 , 0 , 20 , 6 , 31 , 0 , 11 , 9 , 
-766 , 6 , 1 , 0 , 746 , 32 , 10 , 760 , 
-19 , 1 , 0 , 61 , 63 , 6 , 16 , 0 , 
-64 , 27 , 1 , 0 , 18 , 19 , 771 , 8 , 
-782 , 1 , 0 , 771 , 8 , 794 , 27 , 7 , 
-788 , 19 , 1 , 0 , 780 , 6 , 20 , 0 , 
-24 , 771 , 8 , 808 , 27 , 787 , 1 , 19 , 
-7 , 797 , 0 , 730 , 22 , 18 , 11 , 34 , 
-27 , 12 , 44 , 1 , 0 , 732 , 6 , 128 , 
-0 , 730 , 44 , 18 , 6 , 0 , 16 , 26 , 
-8 , 842 , 6 , 64 , 0 , 6 , 1 , 0 , 
-811 , 19 , 18 , 6 , 0 , 32 , 26 , 8 , 
-857 , 6 , 16 , 0 , 6 , 1 , 0 , 811 , 
-19 , 18 , 6 , 0 , 64 , 26 , 8 , 872 , 
-6 , 4 , 0 , 6 , 1 , 0 , 811 , 19 , 
-18 , 6 , 0 , 128 , 26 , 8 , 887 , 6 , 
-1 , 0 , 6 , 1 , 0 , 811 , 19 , 18 , 
-6 , 0 , 256 , 26 , 8 , 902 , 6 , 8 , 
-0 , 6 , 2 , 0 , 811 , 19 , 18 , 6 , 
-32768 , 0 , 26 , 8 , 917 , 6 , 2 , 0 , 
-6 , 3 , 0 , 811 , 19 , 18 , 6 , 16384 , 
-0 , 26 , 8 , 932 , 6 , 64 , 0 , 6 , 
-4 , 0 , 811 , 19 , 18 , 6 , 8192 , 0 , 
-26 , 8 , 947 , 6 , 16 , 0 , 6 , 4 , 
-0 , 811 , 19 , 18 , 6 , 4096 , 0 , 26 , 
-8 , 962 , 6 , 4 , 0 , 6 , 4 , 0 , 
-811 , 19 , 18 , 6 , 256 , 0 , 26 , 8 , 
-977 , 6 , 1 , 0 , 6 , 4 , 0 , 811 , 
-19 , 18 , 6 , 0 , 8 , 26 , 8 , 992 , 
-6 , 32 , 0 , 6 , 1 , 0 , 811 , 19 , 
-18 , 6 , 0 , 4 , 26 , 8 , 1007 , 6 , 
-8 , 0 , 6 , 1 , 0 , 811 , 19 , 18 , 
-6 , 0 , 2 , 26 , 8 , 1022 , 6 , 2 , 
-0 , 6 , 1 , 0 , 811 , 19 , 18 , 6 , 
-0 , 1 , 26 , 8 , 1037 , 6 , 64 , 0 , 
-6 , 2 , 0 , 811 , 19 , 18 , 6 , 512 , 
-0 , 26 , 8 , 1052 , 6 , 4 , 0 , 6 , 
-2 , 0 , 811 , 19 , 18 , 6 , 1 , 0 , 
-26 , 8 , 1067 , 6 , 1 , 0 , 6 , 3 , 
-0 , 811 , 19 , 18 , 6 , 2 , 0 , 26 , 
-8 , 1082 , 6 , 32 , 0 , 6 , 4 , 0 , 
-811 , 19 , 18 , 6 , 4 , 0 , 26 , 8 , 
-1097 , 6 , 8 , 0 , 6 , 4 , 0 , 811 , 
-19 , 18 , 6 , 2048 , 0 , 26 , 8 , 1112 , 
-6 , 2 , 0 , 6 , 4 , 0 , 811 , 19 , 
-18 , 6 , 1024 , 0 , 26 , 8 , 1127 , 6 , 
-1 , 0 , 6 , 5 , 0 , 811 , 19 , 18 , 
-6 , 8 , 0 , 26 , 8 , 1142 , 6 , 32 , 
-0 , 6 , 2 , 0 , 811 , 19 , 18 , 6 , 
-16 , 0 , 26 , 8 , 1157 , 6 , 16 , 0 , 
-6 , 2 , 0 , 811 , 19 , 18 , 6 , 32 , 
-0 , 26 , 8 , 1172 , 6 , 64 , 0 , 6 , 
-5 , 0 , 811 , 19 , 18 , 6 , 64 , 0 , 
-26 , 8 , 1187 , 6 , 8 , 0 , 6 , 3 , 
-0 , 811 , 19 , 18 , 6 , 128 , 0 , 26 , 
-8 , 1202 , 6 , 4 , 0 , 6 , 3 , 0 , 
-811 , 19 , 19 , 1 , 14 , 79 , 0 , 1205 , 
-35 , 49 , 1 , 0 , 6 , 4 , 0 , 1205 , 
-45 , 1 , 0 , 6 , 375 , 0 , 1205 , 45 , 
-1 , 0 , 730 , 39 , 6 , 5 , 0 , 11 , 
-51 , 1207 , 10 , 1233 , 1 , 0 , 18 , 67 , 
-6 , 2 , 0 , 24 , 68 , 1 , 0 , 6 , 
-134 , 0 , 67 , 38 , 6 , 179 , 0 , 1238 , 
-796 , 6 , 32 , 0 , 621 , 70 , 1270 , 6 , 
-179 , 0 , 1238 , 7 , 1257 , 69 , 1 , 0 , 
-796 , 6 , 544 , 256 , 23 , 8 , 1288 , 6 , 
-544 , 256 , 22 , 821 , 1226 , 7 , 1273 , 19 , 
-1247 , 7 , 1273 , 0 , 60 , 62 , 1 , 204 , 
-1292 , 66 , 1212 , 1272 , 65535 , 65535 , 65535 , 65535 , 
+66 , 67 , 68 , 69 , 70 , 72 , 73 , 0 , 
+6 , 1 , 0 , 22 , 1 , 0 , 6 , 65535 , 
+65535 , 22 , 1 , 0 , 20 , 41 , 78 , 11 , 
+37 , 4 , 10 , 89 , 1 , 14 , 0 , 14 , 
+34 , 0 , 11 , 20 , 12 , 20 , 1 , 0 , 
+18 , 72 , 20 , 34 , 1 , 0 , 6 , 32 , 
+0 , 4 , 1 , 0 , 78 , 11 , 104 , 4 , 
+10 , 119 , 19 , 1 , 0 , 53 , 19 , 1 , 
+0 , 6 , 0 , 0 , 20 , 54 , 20 , 19 , 
+1 , 0 , 6 , 0 , 0 , 20 , 54 , 19 , 
+1 , 0 , 11 , 6 , 0 , 0 , 13 , 54 , 
+12 , 20 , 11 , 54 , 12 , 1 , 0 , 11 , 
+53 , 12 , 54 , 1 , 0 , 159 , 59 , 1 , 
+14 , 68 , 0 , 169 , 55 , 78 , 18 , 169 , 
+56 , 44 , 1 , 0 , 9 , 187 , 6 , 45 , 
+0 , 171 , 19 , 1 , 0 , 96 , 169 , 56 , 
+1 , 0 , 19 , 19 , 169 , 55 , 96 , 21 , 
+23 , 1 , 14 , 70 , 0 , 6 , 10 , 0 , 
+203 , 44 , 1 , 0 , 6 , 16 , 0 , 203 , 
+44 , 1 , 0 , 203 , 34 , 146 , 98 , 6 , 
+9 , 0 , 21 , 23 , 9 , 237 , 19 , 6 , 
+7 , 0 , 22 , 18 , 19 , 6 , 48 , 0 , 
+22 , 171 , 1 , 0 , 219 , 21 , 21 , 27 , 
+8 , 254 , 19 , 7 , 245 , 19 , 1 , 0 , 
+189 , 244 , 194 , 116 , 110 , 1 , 0 , 6 , 
+0 , 0 , 256 , 1 , 0 , 9 , 273 , 57 , 
+1 , 0 , 18 , 11 , 269 , 189 , 244 , 12 , 
+180 , 194 , 116 , 110 , 1 , 0 , 9 , 294 , 
+19 , 6 , 65535 , 65535 , 1 , 19 , 6 , 0 , 
+0 , 1 , 0 , 18 , 286 , 274 , 1 , 0 , 
+6 , 0 , 0 , 1 , 0 , 6 , 65535 , 65535 , 
+1 , 0 , 6 , 32 , 0 , 1 , 0 , 21 , 
+21 , 23 , 9 , 329 , 19 , 20 , 19 , 1 , 
+19 , 19 , 1 , 0 , 203 , 34 , 11 , 212 , 
+6 , 0 , 0 , 189 , 219 , 219 , 219 , 219 , 
+219 , 219 , 219 , 219 , 194 , 116 , 110 , 12 , 
+203 , 44 , 1 , 0 , 203 , 34 , 11 , 212 , 
+6 , 0 , 0 , 189 , 219 , 219 , 219 , 219 , 
+194 , 116 , 110 , 12 , 203 , 44 , 1 , 0 , 
+203 , 34 , 11 , 212 , 6 , 0 , 0 , 189 , 
+219 , 219 , 194 , 116 , 110 , 12 , 203 , 44 , 
+1 , 0 , 18 , 356 , 41 , 110 , 6 , 7 , 
+0 , 11 , 37 , 356 , 10 , 403 , 40 , 1 , 
+0 , 18 , 356 , 39 , 110 , 6 , 15 , 0 , 
+11 , 51 , 376 , 10 , 418 , 38 , 1 , 0 , 
+96 , 39 , 40 , 43 , 6 , 255 , 0 , 26 , 
+33 , 11 , 37 , 42 , 10 , 435 , 96 , 104 , 
+116 , 110 , 37 , 356 , 1 , 0 , 6 , 3597 , 
+0 , 41 , 1 , 0 , 25 , 446 , 40 , 43 , 
+8 , 464 , 19 , 424 , 25 , 7 , 455 , 19 , 
+1 , 0 , 94 , 18 , 34 , 72 , 21 , 44 , 
+18 , 34 , 22 , 44 , 1 , 0 , 18 , 4 , 
+1 , 0 , 304 , 94 , 45 , 304 , 19 , 5 , 
+314 , 319 , 314 , 28 , 8 , 487 , 314 , 28 , 
+478 , 466 , 5 , 314 , 319 , 314 , 28 , 8 , 
+512 , 314 , 28 , 478 , 466 , 7 , 499 , 19 , 
+314 , 94 , 18 , 34 , 22 , 72 , 44 , 1 , 
+0 , 94 , 39 , 304 , 40 , 43 , 6 , 255 , 
+0 , 26 , 33 , 11 , 52 , 37 , 23 , 27 , 
+10 , 533 , 37 , 20 , 8 , 547 , 19 , 19 , 
+304 , 1 , 19 , 1 , 0 , 446 , 40 , 43 , 
+8 , 563 , 19 , 521 , 8 , 560 , 1 , 19 , 
+7 , 551 , 1 , 0 , 6 , 58 , 0 , 23 , 
+9 , 576 , 6 , 10 , 0 , 22 , 1 , 6 , 
+29 , 0 , 23 , 1 , 0 , 6 , 0 , 0 , 
+5 , 314 , 319 , 314 , 28 , 8 , 603 , 314 , 
+28 , 564 , 20 , 32 , 32 , 32 , 32 , 27 , 
+7 , 585 , 19 , 1 , 0 , 482 , 549 , 1 , 
+0 , 35 , 332 , 1 , 0 , 8 , 619 , 19 , 
+304 , 1 , 19 , 309 , 1 , 0 , 23 , 613 , 
+1 , 0 , 203 , 34 , 6 , 16 , 0 , 23 , 
+8 , 638 , 19 , 299 , 1 , 19 , 263 , 1 , 
+0 , 48 , 613 , 8 , 661 , 19 , 58 , 10 , 
+45 , 45 , 62 , 32 , 101 , 109 , 112 , 116 , 
+121 , 32 , 84 , 1 , 19 , 48 , 6 , 1 , 
+0 , 622 , 8 , 680 , 19 , 18 , 58 , 4 , 
+45 , 45 , 62 , 32 , 84 , 626 , 1 , 19 , 
+58 , 4 , 45 , 45 , 62 , 32 , 84 , 48 , 
+18 , 39 , 20 , 11 , 78 , 8 , 698 , 7 , 
+691 , 19 , 38 , 13 , 626 , 12 , 20 , 78 , 
+8 , 709 , 7 , 700 , 19 , 1 , 0 , 641 , 
+25 , 482 , 110 , 549 , 8 , 727 , 49 , 48 , 
+9 , 724 , 50 , 19 , 7 , 712 , 94 , 104 , 
+116 , 50 , 205 , 62 , 0 , 58 , 52 , 116 , 
+104 , 105 , 115 , 32 , 105 , 115 , 32 , 103 , 
+111 , 105 , 110 , 103 , 32 , 116 , 111 , 32 , 
+98 , 101 , 32 , 103 , 111 , 111 , 100 , 32 , 
+50 , 55 , 32 , 68 , 101 , 99 , 32 , 50 , 
+48 , 50 , 49 , 32 , 97 , 116 , 32 , 49 , 
+51 , 58 , 50 , 57 , 58 , 53 , 53 , 32 , 
+85 , 84 , 67 , 84 , 1 , 0 , 25 , 6 , 
+1 , 0 , 6 , 2 , 0 , 6 , 3 , 0 , 
+6 , 65437 , 65535 , 6 , 65438 , 65535 , 6 , 65439 , 
+65535 , 641 , 1 , 0 , 6 , 13 , 0 , 1 , 
+0 , 6 , 43 , 0 , 4 , 6 , 32 , 0 , 
+4 , 6 , 43 , 0 , 4 , 25 , 1 , 0 , 
+70 , 70 , 70 , 70 , 70 , 1 , 0 , 18 , 
+72 , 1 , 0 , 839 , 839 , 20 , 23 , 1 , 
+0 , 18 , 6 , 0 , 0 , 20 , 19 , 1 , 
+0 , 849 , 72 , 1 , 0 , 857 , 72 , 1 , 
+0 , 861 , 72 , 1 , 0 , 18 , 6 , 16 , 
+0 , 20 , 19 , 1 , 0 , 18 , 6 , 127 , 
+0 , 20 , 19 , 1 , 0 , 18 , 6 , 256 , 
+0 , 20 , 19 , 1 , 0 , 58 , 20 , 50 , 
+55 , 32 , 68 , 101 , 99 , 32 , 77 , 111 , 
+110 , 100 , 97 , 121 , 32 , 50 , 48 , 58 , 
+50 , 52 , 122 , 84 , 25 , 1 , 205 , 711 , 
 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
@@ -450,40 +402,88 @@ const uint16_t memory[] = {
 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
-65535 , 65535 , 65535 , 65535 , 65535 , 26884 , 26990 , 8308 , 
-1292 , 26370 , 8303 , 1272 , 28168 , 30305 , 26473 , 29793 , 
-8293 , 1247 , 25863 , 26989 , 18548 , 17481 , 1238 , 29444 , 
-28261 , 8292 , 1226 , 15876 , 25448 , 8238 , 1219 , 15877 , 
-28005 , 29801 , 1212 , 29444 , 26992 , 8308 , 1207 , 9989 , 
-28787 , 29801 , 1205 , 18182 , 28005 , 28265 , 8297 , 821 , 
-27908 , 29281 , 8299 , 811 , 29444 , 24931 , 8302 , 796 , 
-29191 , 27749 , 24933 , 25971 , 787 , 28677 , 25970 , 29555 , 
-780 , 16389 , 26992 , 29550 , 771 , 8965 , 26978 , 29556 , 
-751 , 29958 , 25710 , 29285 , 8235 , 746 , 12037 , 24932 , 
-24948 , 732 , 25604 , 29793 , 8289 , 730 , 26889 , 29806 , 
-29285 , 29296 , 29797 , 710 , 11778 , 8307 , 640 , 15617 , 
-621 , 12290 , 8253 , 612 , 16129 , 608 , 9985 , 604 , 
-26626 , 8227 , 580 , 26116 , 28265 , 8292 , 548 , 27909 , 
-29793 , 26723 , 520 , 28933 , 25973 , 31090 , 481 , 25860 , 
-26723 , 8303 , 477 , 29700 , 25193 , 8225 , 465 , 30469 , 
-29295 , 29540 , 451 , 25610 , 25449 , 26996 , 28271 , 29281 , 
-8313 , 445 , 29185 , 408 , 25601 , 393 , 26627 , 11875 , 
-375 , 26627 , 11895 , 355 , 26626 , 8238 , 331 , 27907 , 
-30817 , 318 , 16898 , 8268 , 313 , 29700 , 30066 , 8293 , 
-308 , 26117 , 27745 , 25971 , 303 , 11777 , 298 , 12290 , 
-8252 , 285 , 25602 , 8238 , 273 , 25604 , 25185 , 8307 , 
-268 , 29954 , 8238 , 262 , 29955 , 11876 , 255 , 8962 , 
-8307 , 243 , 8961 , 218 , 26627 , 30821 , 211 , 25607 , 
-25445 , 28009 , 27745 , 204 , 25092 , 29537 , 8293 , 202 , 
-8962 , 8254 , 193 , 15362 , 8227 , 188 , 29444 , 26473 , 
-8302 , 179 , 26628 , 27759 , 8292 , 170 , 26630 , 27759 , 
-25956 , 8306 , 168 , 10754 , 8239 , 164 , 10757 , 27951 , 
-25711 , 158 , 29958 , 12132 , 28525 , 8292 , 145 , 27907 , 
-25711 , 137 , 12033 , 128 , 10753 , 124 , 29700 , 28793 , 
-8293 , 115 , 29445 , 24944 , 25955 , 109 , 25349 , 30063 , 
-29806 , 103 , 29187 , 29807 , 97 , 28675 , 25697 , 95 , 
-29699 , 25193 , 93 , 28677 , 31092 , 25968 , 83 , 12546 , 
-8237 , 77 , 12546 , 8235 , 71 , 19219 , 31077 , 28514 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 65535 , 
+65535 , 65535 , 65535 , 65535 , 26882 , 8292 , 893 , 27654 , 
+29801 , 13618 , 8246 , 885 , 27653 , 29801 , 26167 , 877 , 
+27653 , 29801 , 13873 , 869 , 27652 , 29801 , 8243 , 865 , 
+27652 , 29801 , 8242 , 861 , 27652 , 29801 , 8241 , 857 , 
+27652 , 29801 , 8240 , 849 , 27140 , 26988 , 8308 , 843 , 
+25604 , 26988 , 8308 , 839 , 30470 , 26473 , 27751 , 8293 , 
+832 , 29444 , 26977 , 8292 , 817 , 29702 , 26479 , 26992 , 
+8302 , 812 , 27397 , 29301 , 31348 , 790 , 29700 , 29541 , 
+8308 , 733 , 26889 , 29806 , 29285 , 29296 , 29797 , 711 , 
+11778 , 8307 , 641 , 15617 , 622 , 12290 , 8253 , 613 , 
+16129 , 609 , 9985 , 605 , 26626 , 8227 , 581 , 26116 , 
+28265 , 8292 , 549 , 27909 , 29793 , 26723 , 521 , 28933 , 
+25973 , 31090 , 482 , 25860 , 26723 , 8303 , 478 , 29700 , 
+25193 , 8225 , 466 , 30469 , 29295 , 29540 , 452 , 25610 , 
+25449 , 26996 , 28271 , 29281 , 8313 , 446 , 29185 , 409 , 
+25601 , 394 , 26627 , 11875 , 376 , 26627 , 11895 , 356 , 
+26626 , 8238 , 332 , 27907 , 30817 , 319 , 16898 , 8268 , 
+314 , 29700 , 30066 , 8293 , 309 , 26117 , 27745 , 25971 , 
+304 , 11777 , 299 , 12290 , 8252 , 286 , 25602 , 8238 , 
+274 , 25604 , 25185 , 8307 , 269 , 29954 , 8238 , 263 , 
+29955 , 11876 , 256 , 8962 , 8307 , 244 , 8961 , 219 , 
+26627 , 30821 , 212 , 25607 , 25445 , 28009 , 27745 , 205 , 
+25092 , 29537 , 8293 , 203 , 8962 , 8254 , 194 , 15362 , 
+8227 , 189 , 29444 , 26473 , 8302 , 180 , 26628 , 27759 , 
+8292 , 171 , 26630 , 27759 , 25956 , 8306 , 169 , 10754 , 
+8239 , 165 , 10757 , 27951 , 25711 , 159 , 29958 , 12132 , 
+28525 , 8292 , 146 , 27907 , 25711 , 138 , 12033 , 129 , 
+10753 , 125 , 29700 , 28793 , 8293 , 116 , 29445 , 24944 , 
+25955 , 110 , 25349 , 30063 , 29806 , 104 , 29187 , 29807 , 
+98 , 28675 , 25697 , 96 , 29699 , 25193 , 94 , 28677 , 
+31092 , 25968 , 84 , 12546 , 8237 , 78 , 12546 , 8235 , 
+72 , 25093 , 26988 , 27502 , 70 , 19219 , 31077 , 28514 , 
 29281 , 11876 , 25970 , 25964 , 29537 , 16741 , 27756 , 69 , 
 19216 , 31077 , 28514 , 29281 , 11876 , 25970 , 25964 , 29537 , 
 8293 , 68 , 19214 , 31077 , 28514 , 29281 , 11876 , 29296 , 
diff --git a/picot.sh b/picot.sh
new file mode 100755
index 0000000..24111a4
--- /dev/null
+++ b/picot.sh
@@ -0,0 +1,58 @@
+#!/bin/sh
+
+help() {
+cat << __EOF
+
+  binaries:
+
+    /usr/bin/picocom
+    /usr/bin/ascii-xfr
+
+  packages:
+
+    /var/lib/dpkg/info/picocom.list:/usr/bin/picocom
+    /var/lib/dpkg/info/minicom.list:/usr/bin/ascii-xfr
+__EOF
+}
+
+if [ $# -lt 1 ]; then
+    echo "Not enough arguments"
+    echo "Use:  ./picot.sh /dev/ttyACM0"
+    exit 1
+fi
+
+if [ $1 = "-help" ] || [ $1 = "--help" ]; then
+    help
+    exit 0
+fi
+
+echo "NON-STANDARD escape char is the backslash, not the usual Control+A"
+echo "Control \, Control Q to quit"
+echo "Control \, Control S to send a file from the local directory"
+
+picocom -e \\ -f n -p n -d 8 -b 115200 --imap lfcrlf --omap delbs,crlf --send-cmd "ascii-xfr -sn -l 5 -c 1" ${1}
+
+exit 0
+
+cat << __EOF
+<map> is a comma-separated list of one or more of:
+  crlf : map CR --> LF
+  crcrlf : map CR --> CR + LF
+  igncr : ignore CR
+  lfcr : map LF --> CR
+  lfcrlf : map LF --> CR + LF
+  ignlf : ignore LF
+  bsdel : map BS --> DEL
+  delbs : map DEL --> BS
+  spchex : map special chars (excl. CR, LF & TAB) --> hex
+  tabhex : map TAB --> hex
+  crhex : map CR --> hex
+  lfhex : map LF --> hex
+  8bithex : map 8-bit chars --> hex
+  nrmhex : map normal ascii chars --> hex
+<?> indicates the equivalent short option.
+Short options are prefixed by "-" instead of by "--".
+
+__EOF
+
+# end
diff --git a/t b/t
old mode 100644
new mode 100755
diff --git a/tags b/tags
index df65633..81968f4 100644
--- a/tags
+++ b/tags
@@ -114,108 +114,105 @@ Keyboard.begin	core.fs	+103
 Keyboard.press	core.fs	+104
 Keyboard.release	core.fs	+105
 Keyboard.releaseAll	core.fs	+106
-/branch	core.fs	+108
-begin	core.fs	+110
-again	core.fs	+111
-until	core.fs	+113
--until	core.fs	+114
-/until	core.fs	+115
-then	core.fs	+116
-if	core.fs	+117
--if	core.fs	+118
-/if	core.fs	+119
-while	core.fs	+120
--while	core.fs	+121
-/while	core.fs	+122
-repeat	core.fs	+123
-for	core.fs	+124
-next	core.fs	+125
--:	core.fs	+126
-:	core.fs	+127
-;	core.fs	+128
-cvariable	core.fs	+129
-wvariable	core.fs	+130
-variable	core.fs	+131
-#,	core.fs	+134
-[']	core.fs	+135
-s"	core.fs	+136
-1+	core.fs	+139
-1-	core.fs	+140
-ptype	core.fs	+141
-."	core.fs	+142
-tib	core.fs	+144
-pad	core.fs	+145
-rot	core.fs	+146
-count	core.fs	+147
-space	core.fs	+148
-type	core.fs	+149
-*	core.fs	+151
-/	core.fs	+153
-mod	core.fs	+154
-ud/mod	core.fs	+155
-*/mod	core.fs	+158
-*/	core.fs	+159
-holder	core.fs	+160
-hold	core.fs	+161
-sign	core.fs	+162
-<#	core.fs	+163
-#>	core.fs	+164
-base	core.fs	+165
-decimal	core.fs	+166
-hex	core.fs	+167
-#	core.fs	+168
-#s	core.fs	+171
-ud.	core.fs	+173
-u.	core.fs	+174
-dabs	core.fs	+175
-d.	core.fs	+176
-0<	core.fs	+177
-.	core.fs	+178
-false	core.fs	+180
-true	core.fs	+181
-BL	core.fs	+182
-max	core.fs	+183
-h.	core.fs	+206
-hw.	core.fs	+208
-hc.	core.fs	+210
-d	core.fs	+213
-r	core.fs	+214
-.word	core.fs	+215
-dict	core.fs	+220
-dictionary	core.fs	+221
-words	core.fs	+222
-tib!	core.fs	+223
-echo	core.fs	+225
-query	core.fs	+226
-match	core.fs	+231
-find	core.fs	+235
-digit	core.fs	+240
-h#	core.fs	+241
-'	core.fs	+245
-?	core.fs	+246
-0=	core.fs	+247
-=	core.fs	+249
-?.	core.fs	+250
-.s	core.fs	+251
-interpret	core.fs	+255
-data	main.fs	+3
-/data	main.fs	+4
-under+	main.fs	+5
-#bits	main.fs	+6
-@pins	main.fs	+8
-press	main.fs	+9
-release	main.fs	+10
-scan	main.fs	+11
-mark	main.fs	+14
-Gemini	main.fs	+15
-'spit	main.fs	+42
-spit	main.fs	+43
->emit	main.fs	+44
->hc.	main.fs	+45
-send	main.fs	+46
-emitHID	main.fs	+47
-navigate	main.fs	+50
-go	main.fs	+53
-init	main.fs	+58
+blink	core.fs	+108
+/branch	core.fs	+109
+begin	core.fs	+111
+again	core.fs	+112
+until	core.fs	+114
+-until	core.fs	+115
+/until	core.fs	+116
+then	core.fs	+117
+if	core.fs	+118
+-if	core.fs	+119
+/if	core.fs	+120
+while	core.fs	+121
+-while	core.fs	+122
+/while	core.fs	+123
+repeat	core.fs	+124
+for	core.fs	+125
+next	core.fs	+126
+-:	core.fs	+127
+:	core.fs	+128
+;	core.fs	+129
+cvariable	core.fs	+130
+wvariable	core.fs	+131
+variable	core.fs	+132
+#,	core.fs	+141
+[']	core.fs	+142
+s"	core.fs	+143
+1+	core.fs	+146
+1-	core.fs	+147
+ptype	core.fs	+148
+."	core.fs	+149
+tib	core.fs	+151
+pad	core.fs	+152
+rot	core.fs	+153
+count	core.fs	+154
+space	core.fs	+155
+type	core.fs	+156
+*	core.fs	+158
+/	core.fs	+160
+mod	core.fs	+161
+ud/mod	core.fs	+162
+*/mod	core.fs	+165
+*/	core.fs	+166
+holder	core.fs	+167
+hold	core.fs	+168
+sign	core.fs	+169
+<#	core.fs	+170
+#>	core.fs	+171
+base	core.fs	+172
+decimal	core.fs	+173
+hex	core.fs	+174
+#	core.fs	+175
+#s	core.fs	+178
+ud.	core.fs	+180
+u.	core.fs	+181
+dabs	core.fs	+182
+d.	core.fs	+183
+0<	core.fs	+184
+.	core.fs	+185
+false	core.fs	+187
+true	core.fs	+188
+BL	core.fs	+189
+max	core.fs	+190
+h.	core.fs	+213
+hw.	core.fs	+215
+hc.	core.fs	+217
+d	core.fs	+220
+r	core.fs	+221
+.word	core.fs	+222
+dict	core.fs	+227
+dictionary	core.fs	+228
+words	core.fs	+229
+tib!	core.fs	+230
+echo	core.fs	+232
+query	core.fs	+233
+match	core.fs	+238
+find	core.fs	+242
+digit	core.fs	+247
+h#	core.fs	+248
+'	core.fs	+252
+?	core.fs	+253
+0=	core.fs	+254
+=	core.fs	+256
+?.	core.fs	+257
+.s	core.fs	+259
+interpret	core.fs	+263
+test	main.fs	+10
+kurtz	main.fs	+12
+togpin	main.fs	+14
+said	main.fs	+16
+wiggle	main.fs	+22
+dlit	main.fs	+29
+jlit	main.fs	+30
+lit0	main.fs	+33
+lit1	main.fs	+34
+lit2	main.fs	+35
+lit3	main.fs	+36
+lit16	main.fs	+38
+lit7f	main.fs	+39
+lit256	main.fs	+40
+id	main.fs	+42
 .stack	job.fs	+56
 check	job.fs	+57
